"""File to handle all web interaction with PXE records."""
from flask_restful import reqparse, Resource, url_for, abort

from .. import pxe
from marmoset import config as config_reader

CONFIG = config_reader.load_config()
IMMUTABLE_PXE_CONFIG_SUPPORT = CONFIG['PXEConfig'].get('ImmutableSupport')

PARSER = reqparse.RequestParser()
PARSER.add_argument('ip_address', type=str)
PARSER.add_argument('password', type=str, default=None)
PARSER.add_argument('script', type=str, default=None)
PARSER.add_argument('uuid', type=str, default=None)
PARSER.add_argument('ipv6_address', type=str, default=None)
PARSER.add_argument('ipv6_gateway', type=str, default=None)
PARSER.add_argument('ipv6_prefix', type=str, default=None)
PARSER.add_argument(
    'label',
    type=str,
    choices=pxe.Label.names(),
    default=pxe.Label.names()[0])

if IMMUTABLE_PXE_CONFIG_SUPPORT == 'True':
    PERSISTENT_CHOICES = ['true', 'True', 'false', 'False']
else:
    PERSISTENT_CHOICES = ['false', 'False']
PARSER.add_argument('persistent', choices=PERSISTENT_CHOICES,
                    type=str, default='false')


class PXECollection(Resource):
    """Collection class to deal with PXE records."""

    def get(self):
        """List all PXE entries."""
        return [vars(c) for c in pxe.ClientConfig.all()]

    def post(self):
        """
        Accept a new PXE entry.

        Add a PXE entry for the given ip_address. Password, uuid, script and
        IPv6 parameteres are optional parameters. The IPv6 parameters are used
        only when all of them are provided. Missing password or uuid will
        be auto generated by ClientConfig.
        """
        args = PARSER.parse_args()

        persistent = args.persistent in ['true', 'True']
        print(args)
        client_config = pxe.ClientConfig(
            args.ip_address,
            args.password,
            args.script,
            args.uuid,
            args.ipv6_address,
            args.ipv6_gateway,
            args.ipv6_prefix,
            persistent
        )

        try:
            client_config.create(pxe.Label.find(args.label))
            location = url_for(
                'pxeobject',
                _method='GET',
                ip_address=client_config.ip_address)
            return vars(client_config), 201, {'Location': location}
        except pxe.exceptions.InputError as exception:
            abort(400, message=str(exception))
        except Exception as exception:
            abort(500, message=str(exception))


class PXEObject(Resource):
    """Class to handle a single PXE record."""

    def get(self, ip_address):
        """Lookup a PXE entry for the given ip_address."""
        client_config = pxe.ClientConfig(ip_address)
        if client_config.exists():
            return vars(client_config)
        abort(404)

    def delete(self, ip_address):
        """Remove a PXE entry for the given ip_address."""
        client_config = pxe.ClientConfig(ip_address)
        if client_config.exists():
            client_config.remove()
            return '', 204
        abort(404)
